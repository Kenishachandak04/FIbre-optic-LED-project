#include <FastLED.h>
#include <math.h>

int sound = A0;
#define NUM_LEDS 38
#define DATA_PIN 7

#define THRESHOLD 5

// Define the array of leds
CRGB leds[NUM_LEDS];

int counter = 0;

#define keeptrack 50
int raw_array[keeptrack];
float means_array[keeptrack];

int mean = 0;

float variance = 0.0;
float prev_variance = 0.0;
float variance_rate = 0.0;

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
}

void loop() {
  float a = analogRead(A0);
  float s = a;
  s = map(s, 0, 500, 0, 255);

  raw_array[counter] = s;
  mean = find_mean(raw_array);
  means_array[counter] = mean;



    counter++;
    if (counter == keeptrack) {
      // Calculate variance
      prev_variance = variance;
      variance = find_variance(raw_array);
      variance_rate = (variance - prev_variance) / (float)keeptrack;
      counter = 0;

      Serial.println(variance_rate);
      
    if (abs(variance_rate) > THRESHOLD) {
    // light up every 8th led
    for (int i = 0; i <= NUM_LEDS; i++) {
      if (i % 8 == 0) {
        leds[i] = CRGB(s, 255 - s - variance_rate/10, s +variance_rate/10 );
      } else {
        leds[i] = CRGB(0, 0, 0);
      }
    }}

    else{
      for (int i = 0; i <= NUM_LEDS; i++) {
      if (i % 1 == 0) {
        leds[i] = CRGB(255, 255, 255);
      } else {
        leds[i] = CRGB(0, 0, 0);
      }
    }
    }
    FastLED.show();
    
    }
  }


int zeros(int nums[]) {
  for (int i = 0; i <= sizeof(nums) / sizeof(int); i++) {
    nums[i] = 0;
  }
  return nums;
}

int find_mean(int r_array[]) {
  int sum = 0;
  for (int i = 0; i < keeptrack; i++) {
    sum += r_array[i];
  }
  return sum / keeptrack;
}

float find_variance(int r_array[]) {
  float sum_sq_diff = 0.0;
  for (int i = 0; i < keeptrack; i++) {
    sum_sq_diff += pow((r_array[i] - mean), 2);
  }
  return sum_sq_diff / keeptrack;
}
