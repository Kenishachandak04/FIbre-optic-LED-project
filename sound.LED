/*Improvements -
switching off LEDS when not needed 
delay check with the final built
brightness transitions needs to be smoother
*/
#include <FastLED.h>
int sound=A0;
#define NUM_LEDS 28
#define DATA_PIN 7
CRGB leds[NUM_LEDS];

void setup() { 
  Serial.begin(9600);
  FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
   for (int i=0;i<=NUM_LEDS;i++)
  {
    leds[i]= CRGB(255,255,255);

  }
}

void loop() { 
  float s=analogRead(A0);
  s=map(s,0,1023,0,255);
  Serial.println(s);
  for (int i=0;i<=NUM_LEDS;i++)
{
  /*  
  // If sound value is between 3 and 10, set LEDs to a specific color and show
  if(soundValue == 3 && soundValue < 10) {
    for each LED in steps of 8 {
      Set LED color to a calculated value based on soundValue
    }
    Show LEDs
  }
  // If sound value is between 10 and 15, set LEDs to a specific color and show
  else if(soundValue > 10 && soundValue < 15) {
    for each LED in steps of 8 {
      Set LED color to a calculated value based on soundValue
    }
    Show LEDs
  }
*/
  if (s>15 && s<30){ //
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB(s,30,(255-s));
      FastLED.show();
}}
  else if (s>=30 && s<60){
      for (int i=1;i<=NUM_LEDS;i+=8)
    {
        leds[i] = CRGB((s),s+10,255-s);
        FastLED.show();
    }}
   else if (s>=60 && s<90){
      for (int i=1;i<=NUM_LEDS;i+=8)
    {
        leds[i] = CRGB(s,s+20,255-s);
        FastLED.show();
    }}
/*
    else if (s>60 && s<70)
    {
      for (int i=1;i<=NUM_LEDS;i+=8){
       slow transiotion colour map

      }
    }
   else if (s>70 && s<80)
   {
    for (int i=1;i<=NUM_LEDS;i+=8){
     slow transiotion colour map
    }
  }
   else if (s>80 && s<90){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      mapping colours 
    }
  }
  else if (s>90 && s<100){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
     clour map
    } 
  }*/
  else if (s>=90 && s<120){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB((s+10),s+30,s+50);
      FastLED.show();
   }
  }
   /*else if (s>110 && s<120){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      colors need to be manpped 
   }
  }
   else if (s>120 && s<130){
    for (int i=1;i<=NUM_LEDS;i+=8){
      
   }mapping colors 
  }
  */
  else if (s>=120 && s<150){
   for (int i=1;i<=NUM_LEDS;i+=8)
   {
    leds[i] = CRGB((20+s),(45+s),s+30);
    FastLED.show();
   }
  }  
   else if (s>=150 && s<200){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB((30+s),50+s,(45+s));
      FastLED.show();
    }
  }
   else if (s>=200 && s<250){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      leds[i] = CRGB((40+s),(60+s),55+s);
      FastLED.show();
    }
  }
   else if (s>=250 && s<300){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      leds[i] = CRGB(50+s,(70+s),10);
      FastLED.show();
    }
  }
   else if (s>=300 && s<350){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      leds[i] = CRGB((60+s),s+90,20);
      FastLED.show();
    }
  }
   else if (s>=350 && s<450){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB((80+s),(100+s),35);
      FastLED.show();
   }
  }
   else if (s>=450 && s<550){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB(90+s,s+10,50);
      FastLED.show();
   }
  }
   else if (s>=550 && s<650){
    for (int i=1;i<=NUM_LEDS;i+=8)
   {
      leds[i] = CRGB(s+10,s,255-s);
      FastLED.show();
   }
  }
   else if (s>=650 && s<750){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      leds[i] = CRGB((s,(255-s),30));
      FastLED.show();
    }
  }
   else if (s>750 && s<800){
    for (int i=1;i<=NUM_LEDS;i+=8)
    {
      leds[i] = CRGB((s,(10+s),10));
      FastLED.show();
    }
  }
  else 
   {
    FastLED.show();
    }
   delay(20);
   s=0;
}
}
