#include <FastLED.h>

#define NUM_LEDS 38
#define DATA_PIN 7

#define THRESHOLD 0.076
#define TRANSITION_DURATION 3000 // Duration of the color transition in milliseconds

// Define the array of leds
CRGB leds[NUM_LEDS];

int counter = 0;

#define keeptrack 50
int raw_array[keeptrack];
float means_array[keeptrack];

int mean = 0;

float variance = 0.0;
float prev_variance = 0.0;
float variance_rate = 0.0;

CRGB prev_color = CRGB(150, 150, 150);
CRGB target_color;
unsigned long transition_start_time = 0;

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
}

void loop() {
  float a = analogRead(A0);
  float s = map(a, 0, 500, 0, 255); // Simplified mapping directly
  float m = map(s, 0, 255, -10, 10);

  raw_array[counter] = s;
  mean = find_mean(raw_array);
  means_array[counter] = mean;

  counter++;
  if (counter == keeptrack) {
    // Calculate variance
    prev_variance = variance;
    variance = find_variance(raw_array);
    variance_rate = (variance - prev_variance) / (float)keeptrack;
    counter = 0;

    Serial.println(variance_rate);

    if (abs(variance_rate) > THRESHOLD) {
      // Calculate the target color based on the variance rate
      target_color = CRGB(
        constrain(prev_color.r + (variance_rate * 50), 0, 150),
        constrain(prev_color.g + (variance_rate * 50), 0, 150),
        constrain(prev_color.b + (variance_rate * 50), 0, 150)
      );
      
      prev_color.r += 1.5* variance_rate;
      prev_color.g -= 1.5* variance_rate;
      prev_color.b += 1.5* variance_rate;

      transition_start_time = millis();
    }
  }

  // Interpolate the color between the previous and target colors
  unsigned long elapsed_time = millis() - transition_start_time;
  if (elapsed_time < TRANSITION_DURATION) {
    float t = sin8((elapsed_time * PI) / TRANSITION_DURATION); // Using sin function for smooth transition
    for (int i = 0; i < NUM_LEDS; i++) {
      if (i % 8 == 0) {
        leds[i] = CRGB(
          map(t, -1, 1, prev_color.r, target_color.r),
          map(t, -1, 1, prev_color.g, target_color.g),
          map(t, -1, 1, prev_color.b, target_color.b) 
        );
      } else {
        leds[i] = CRGB(0, 0, 0);
      }
    }
    FastLED.show();
  } else {
    // Update the previous color to the target color
    prev_color = target_color;
  }
}

int find_mean(int r_array[]) {
  int sum = 0;
  for (int i = 0; i < keeptrack; i++) {
    sum += r_array[i];
  }
  return sum / keeptrack;
}

float find_variance(int r_array[]) {
  float sum_sq_diff = 0.0;
  for (int i = 0; i < keeptrack; i++) {
    sum_sq_diff += pow((r_array[i] - mean), 2);
  }
  return sum_sq_diff / keeptrack;
}
